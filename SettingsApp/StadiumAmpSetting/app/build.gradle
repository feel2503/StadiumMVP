plugins {
    id 'com.android.application'
}
ext {
    AppVersionCode = 100004
    AppVersionName = "0.4"
}

android {
    compileSdk 32

    signingConfigs {
        thiscat_config {
            keyAlias "thiscat"
            keyPassword "=Eltmzpt="
            storeFile file('../../KeyStore/thiscat.keystore')
            storePassword "=Eltmzpt="
        }
    }

    defaultConfig {
        applicationId "kr.co.thiscat.stadiumampsetting"
        minSdk 28
        targetSdk 30
        versionCode AppVersionCode
        versionName AppVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.thiscat_config
        }
        debug{
            signingConfig signingConfigs.thiscat_config
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.8.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'

    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

    // https://mvnrepository.com/artifact/com.squareup.picasso/picasso
    implementation group: 'com.squareup.picasso', name: 'picasso', version: '2.5.2'

    // https://mvnrepository.com/artifact/com.github.bumptech.glide/glide
    implementation group: 'com.github.bumptech.glide', name: 'glide', version: '4.15.0'

}

task releaseDeploy {
    finalizedBy {
        def name_prefix = "${rootProject.name}_${AppVersionName}"
        def release_path = '../../apk'
        def release_apk = "build/outputs/apk/release"
        if (project.hasProperty("buildDate")) {
            def buildDate = (new Date()).format('MMddHHmm')
            name_prefix = "${name_prefix}_${buildDate}"
        }

        // APK 배포
        task(deployApk, type: Copy) {
            from "${release_apk}"
            into "${release_path}"
            rename('.*.apk', "${name_prefix}.apk")
            include('**/*release.apk')
        }
    }
}

task releaseBuild(dependsOn: ['assembleRelease']) {
}

task release(dependsOn: ['clean', 'releaseBuild', 'releaseDeploy']) {
    releaseBuild.mustRunAfter clean
    releaseDeploy.mustRunAfter releaseBuild
}